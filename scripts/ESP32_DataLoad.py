import oracledb
import pandas as pd
from datetime import datetime

# Conexão com o Oracle
def conectar_oracle():
    try:
        conn = oracledb.connect(
            user="admin",
            password="FIAPfiap2024",
            dsn="fiap2024_low",
            config_dir=r"C:\opt\OracleCloud\MYDB",
            wallet_location=r"C:\opt\OracleCloud\MYDB",
            wallet_password="FIAPfiap2024"
        )
        print("Conexão com o Oracle estabelecida com sucesso!")
        return conn
    except Exception as e:
        print(f"Erro ao conectar ao Oracle: {e}")
        return None

# Criar tabela
def criar_tabela(conn):
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("""
                SELECT COUNT(*)
                FROM user_tables
                WHERE table_name = 'FASE04_SENSORES'
            """)
            table_exists = cursor.fetchone()[0] > 0

            if table_exists:
                print("A tabela 'FASE04_SENSORES' já existe. Limpando dados antigos.")
                cursor.execute("TRUNCATE TABLE FASE04_SENSORES")
            else:
                create_table_sql = """
                CREATE TABLE FASE04_SENSORES (
                    SENSOR_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    TIMESTAMP TIMESTAMP,
                    HUMIDITY FLOAT,
                    TEMPERATURE FLOAT,
                    PH FLOAT,
                    PHOSPHORUS INT,
                    POTASSIUM INT,
                    IRRIGATION_ON INT
                )
                """
                cursor.execute(create_table_sql)
                print("Tabela criada com sucesso!")
        except oracledb.DatabaseError as e:
            print(f"Erro ao criar a tabela: {e}")
        finally:
            cursor.close()

# Carregar dados do CSV
def carregar_dados_csv(csv_path):
    df = pd.read_csv(csv_path, delimiter=',')
    print("Colunas no arquivo CSV:", df.columns)

    # Convertendo a coluna 'Timestamp' para datetime com o formato correto
    try:
        # Usando o formato de 24 horas
        df['Timestamp'] = pd.to_datetime(df['Timestamp'], format='%m/%d/%Y %H:%M')
        # Formatando a coluna Timestamp no formato desejado para Oracle
        df['Timestamp'] = df['Timestamp'].dt.strftime('%Y-%m-%d %H:%M:%S')
    except Exception as e:
        print(f"Erro ao converter a coluna 'Timestamp': {e}")
        print("Tentando conversão com formato 'mixed'.")
        try:
            df['Timestamp'] = pd.to_datetime(df['Timestamp'], errors='coerce')
        except Exception as e2:
            print(f"Erro persistente na conversão de 'Timestamp': {e2}")
            print("Removendo linhas com 'Timestamp' inválido.")
            df = df.dropna(subset=['Timestamp'])
    return df

    # Garantindo que colunas numéricas estejam no formato correto
    num_cols = ['Temperatura', 'Umidade', 'pH', 'IrrigaçãoOn']
    for col in num_cols:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')  # Força valores inválidos para NaN
        else:
            print(f"A coluna {col} não foi encontrada no CSV.")
    
    # Removendo linhas com valores inválidos
    df = df.dropna(subset=num_cols)

    return df

# Inserir dados no banco de dados
def inserir_dados_csv(conn, df):
    cursor = conn.cursor()
    for _, row in df.iterrows():
        try:
            cursor.execute(
                """
                INSERT INTO FASE04_SENSORES (TIMESTAMP, TEMPERATURE, HUMIDITY, PH, PHOSPHORUS, POTASSIUM, IRRIGATION_ON)
                VALUES (TO_TIMESTAMP(:1, 'YYYY-MM-DD HH24:MI:SS'), :2, :3, :4, :5, :6, :7)
                """,
                (
                    row['Timestamp'],
                    float(row['Temperatura']),
                    float(row['Umidade']),
                    float(row['pH']),
                    str(row['Fósforo']),
                    str(row['Potássio']),
                    int(row['IrrigaçãoOn'])
                )
            )
        except oracledb.DatabaseError as e:
            print(f"Erro ao inserir os dados: {e}")
    conn.commit()
    print("Dados inseridos com sucesso!")
    cursor.close()

# Função principal
def main():
    conn = conectar_oracle()
    if conn:
        criar_tabela(conn)

        df = carregar_dados_csv('dados/Arduino.csv')
        inserir_dados_csv(conn, df)

        # Ler dados inseridos (opcional)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM FASE04_SENSORES")
        rows = cursor.fetchall()
        print("Dados inseridos:")
        for row in rows:
            print(row)

        cursor.close()
        conn.close()
        print("Conexão com o banco de dados encerrada.")


if __name__ == "__main__":
    main()
